---
- name: Debug variables
  debug:
    msg:
      - "jenkins_dir: {{ jenkins_dir }}"
      - "jenkins_home: {{ jenkins_home }}"

- name: Get JAVA_HOME
  win_shell: |
    [System.Environment]::GetEnvironmentVariable('JAVA_HOME') 
  register: java_home  
  
- name: Construct path to java_home_result
  set_fact:
    java_home_result: "{{ java_home.stdout.strip() }}"

- name: Check if Jenkins service exists
  win_command: |
    powershell -Command "Get-Service -Name jenkins -ErrorAction SilentlyContinue"
  register: jenkins_service_check
  ignore_errors: yes

- name: Set fact if Jenkins is installed
  set_fact:
    jenkins_installed: "{{ jenkins_service_check.rc == 0 }}"

- name: Ensure {{ jenkins_home }} directory exists
  win_file:
    path: "{{ jenkins_home }}"
    state: directory
  when: not jenkins_installed

- name: Ensure {{ jenkins_dir }} directory exists
  win_file:
    path: "{{ jenkins_dir }}"
    state: directory
  when: not jenkins_installed

- name: Create {{ jenkins_user_name }} with a password
  win_user:
    name: "{{ jenkins_user_name }}"
    password: "{{ jenkins_user_password }}"
    password_never_expires: yes
    state: present

- name: Grant "{{ jenkins_user_name }}" "Logon as a Service" right
  win_user_right:
    name: SeServiceLogonRight
    users:
      - "{{ jenkins_user_name }}"

- name: Set permissions on Jenkins installation directory
  win_acl:
    path: "{{ jenkins_dir }}"
    user: "{{ jenkins_user_name }}"
    rights: FullControl
    type: allow
    recursive: yes

- name: Set permissions on Jenkins workspace directory
  win_acl:
    path: "{{ jenkins_home }}"
    user: "{{ jenkins_user_name }}"
    rights: Modify
    type: allow
    recursive: yes

- name: Ensure C:\\Temp directory exists
  win_file:
    path: "C:\\Temp"
    state: directory
  when: not jenkins_installed

# - name: Download Jenkins MSI
#   win_uri:
#     url: "https://mirrors.jenkins.io/windows/latest"
#     dest: "C:\\Temp\\jenkins.msi"
#     method: GET
#     force_basic_auth: no
#     follow_redirects: all
#   when: not jenkins_installed

# - name: Download Jenkins MSI
#   win_shell: |
#     [Net.ServicePointManager]::SecurityProtocol = “Tls, Tls11, Tls12, Ssl3”

#     Start-BitsTransfer -Source "https://mirrors.jenkins.io/windows/latest" -Destination "C:\\Temp\\jenkins.msi"
#   when: not jenkins_installed

# - name:  Download Jenkins MSI using PowerShell
#   win_shell: |
#     [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
#     $client = New-Object System.Net.WebClient
#     $client.DownloadFile("https://mirrors.jenkins.io/windows/latest", "C:\\Temp\\jenkins.msi")
#   when: not jenkins_installed

# Please note that we was not able to run install with
# SERVICE_USERNAME="{{ jenkins_user_name }}" SERVICE_PASSWORD="{{ jenkins_user_password }}" 
# there are some user permission issue:
# -- Error 1923. Service 'Jenkins' (Jenkins) could not be installed.  Verify that you have sufficient privileges to install system services.
#
# also script output reveal the password
# We will change the user on the service when will change other parameters like port

- name: Install Jenkins
  win_shell: |
    msiexec.exe /i "D:\\Install\\jenkins.msi" /qn /norestart JENKINSDIR="{{ jenkins_dir }}" JAVA_HOME="{{ java_home_result }}" /L*v "C:\Temp\jenkins.log"
  when: not jenkins_installed

- name: Stop Jenkins service to apply port configuration
  win_service:
    name: jenkins
    state: stopped  

- name: Stop inheritance and remove existing ACLs for {{ jenkins_home }}
  win_acl_inheritance:
    path: "{{ jenkins_home }}"
    reorganize: true
    state: absent


- name: Remove all old ACL users from {{ jenkins_home }}
  win_shell: |
    $acl = Get-Acl -Path D:\JenkinsHome
    Foreach($access in $acl.access) 
    {
        $acl.RemoveAccessRule($access)    
    }
    Set-Acl -path D:\JenkinsHome -aclObject $acl
  
- name: Ensure only JenkinsUser, Administrators, and SYSTEM have access for {{ jenkins_home }}
  win_acl:
    path: "{{ jenkins_home }}"
    user: "{{ item }}"
    rights: fullcontrol
    type: allow
    state: present
  loop:
    - "{{ jenkins_user_name }}"
    - Administrators
    - SYSTEM

- name: Remove folder if it exists
  win_file:
    path: "{{ jenkins_dir }}\\jre"
    state: absent

- name: Update JENKINS_HOME environment variable
  community.windows.win_xml:
    path: "{{ jenkins_dir }}\\jenkins.xml"
    xpath: "/service/env[@name='JENKINS_HOME']"
    attribute: "value"
    type: attribute
    fragment: "{{ jenkins_home }}"

- name: Construct path to java.exe
  set_fact:
    java_executable: "{{ java_home_result }}\\bin\\java.exe"

- name: Update the path to Java executable using environment variable JAVA_HOME
  community.windows.win_xml:
    path: "{{ jenkins_dir }}\\jenkins.xml"
    xpath: "/service/executable"
    type: text
    fragment: "{{ java_executable }}"

- name: Update --httpPort in arguments
  community.windows.win_xml:
    path: "{{ jenkins_dir }}\\jenkins.xml"
    xpath: /service/arguments
    type: text
    fragment: '-Xrs -Xmx1024m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle -jar {{ jenkins_dir }}\jenkins.war --httpPort={{ jenkins_port }} --enable-future-java --webroot={{ jenkins_dir }}\war'   

- name: Find files in the plugins dir
  win_find:
    paths: "{{ jenkins_home }}\\plugins"
    recurse: no
  register: plugins_dir_contents

- name: Set fact if jenkins plugins directory is not empty
  set_fact:
    jenkins_plugins_installed: "{{ plugins_dir_contents.files | length > 0 }}"

- name: Ensure jenkins-plugin-manager plugins directory exists
  ansible.builtin.win_file:
    path: "{{ jenkins_dir }}\\jenkins-plugin-manager"
    state: directory
  when: not jenkins_plugins_installed

- name: Download Jenkins Plugin Installation Manager Tool
  ansible.builtin.win_get_url:
    url: "https://github.com/jenkinsci/plugin-installation-manager-tool/releases/download/{{ jenkins_plugin_manager_version }}/jenkins-plugin-manager-{{ jenkins_plugin_manager_version }}.jar"
    dest: "{{ jenkins_dir }}\\jenkins-plugin-manager"
  when: not jenkins_plugins_installed

- name: Ensure Jenkins plugins directory exists
  ansible.builtin.win_file:
    path: "{{ jenkins_home }}\\plugins"
    state: directory
  when: not jenkins_plugins_installed  

- name: Copy plugin list file to Jenkins directory
  win_copy:
    src: plugins.txt
    dest: "{{ jenkins_dir }}\\jenkins-plugin-manager\\plugins.txt"
  when: not jenkins_plugins_installed

- name: Install Jenkins plugins
  ansible.builtin.win_command: >
    {{ java_executable }} -jar {{ jenkins_dir }}\jenkins-plugin-manager\jenkins-plugin-manager-{{ jenkins_plugin_manager_version }}.jar
    --plugin-file {{ jenkins_dir }}\jenkins-plugin-manager\plugins.txt
    --war "{{ jenkins_dir }}\war\jenkins.war"
    --plugin-download-directory "{{ jenkins_home }}\plugins"
  when: not jenkins_plugins_installed

- name: Configure Jenkins service to run as {{ jenkins_user_name }}
  win_service:
    name: Jenkins
    start_mode: auto
    username: ".\\{{ jenkins_user_name }}"
    password: "{{ jenkins_user_password }}"
    path: "{{ jenkins_dir }}\\jenkins.exe"
    state: started