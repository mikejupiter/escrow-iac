---
- name: Debug variables
  debug:
    msg:
      - "jenkins_dir: {{ jenkins_dir }}"
      - "jenkins_home: {{ jenkins_home }}"

- name: Check if Jenkins service exists
  win_command: |
    powershell -Command "Get-Service -Name jenkins -ErrorAction SilentlyContinue"
  register: jenkins_service_check
  ignore_errors: yes

- name: Set fact if Jenkins is installed
  set_fact:
    jenkins_installed: "{{ jenkins_service_check.rc == 0 }}"

- name: Ensure {{ jenkins_home }} directory exists
  win_file:
    path: "{{ jenkins_home }}"
    state: directory
  when: not jenkins_installed

- name: Ensure {{ jenkins_dir }} directory exists
  win_file:
    path: "{{ jenkins_dir }}"
    state: directory
  when: not jenkins_installed  

- name: Set JENKINS_HOME environment variable
  win_environment:
    state: present
    name: JENKINS_HOME
    value: "{{ jenkins_home }}"
    level: machine
  when: not jenkins_installed

- name: Ensure C:\\Temp directory exists
  win_file:
    path: "C:\\Temp"
    state: directory
  when: not jenkins_installed

# - name: Download Jenkins MSI
#   win_uri:
#     url: "https://mirrors.jenkins.io/windows/latest"
#     dest: "C:\\Temp\\jenkins.msi"
#     method: GET
#     force_basic_auth: no
#     follow_redirects: all
#   when: not jenkins_installed

# - name:  Download Jenkins MSI using PowerShell
#   win_shell: |
#     [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
#     $client = New-Object System.Net.WebClient
#     $client.DownloadFile("https://mirrors.jenkins.io/windows/latest", "C:\\Temp\\jenkins.msi")
#   when: not jenkins_installed

- name: Install Jenkins
  win_shell: |
    msiexec.exe /i "D:\\Install\\jenkins.msi" /qn /norestart JENKINSDIR="{{ jenkins_dir }}" JAVA_HOME="{{ lookup('env', 'JAVA_HOME') }}" /L*v "C:\Temp\jenkins.log"
  when: not jenkins_installed

- name: Stop Jenkins service to apply port configuration
  win_service:
    name: jenkins
    state: stopped

- name: Remove folder if it exists
  win_file:
    path: "{{ jenkins_dir }}\\jre"
    state: absent

- name: Update JENKINS_HOME environment variable
  community.windows.win_xml:
    path: "{{ jenkins_dir }}\\jenkins.xml"
    xpath: "/service/env[@name='JENKINS_HOME']"
    attribute: "value"
    type: attribute
    fragment: "{{ jenkins_home }}"

- name: Update the path to Java executable using environment variable JAVA_HOME
  community.windows.win_xml:
    path: "{{ jenkins_dir }}\\jenkins.xml"
    xpath: "/service/executable"
    type: text
    fragment: "{{ lookup('env', 'JAVA_EXE') }}"
  environment:
    JAVA_EXE: "{{ lookup('env', 'JAVA_HOME') }}\\bin\\java.exe"

- name: Update --httpPort in arguments
  community.windows.win_xml:
    path: "{{ jenkins_dir }}\\jenkins.xml"
    xpath: /service/arguments
    attribute: "--httpPort"
    type: attribute
    fragment: "{{ jenkins_port }}"    

- name: Copy plugin list file to Jenkins directory
  win_copy:
    src: plugins.txt
    dest: "{{ jenkins_dir }}\\plugins.txt"
  when: not jenkins_installed

- name: Reinstall Jenkins plugins
  win_shell: |
    java -jar "{{ jenkins_dir }}\\jenkins-cli.jar" -s http://localhost:{{ jenkins_port}} install-plugin $(Get-Content -Path "{{ jenkins_dir }}\\plugins.txt") --verbose
  args:
    chdir: "{{ jenkins_dir }}"    
  when: not jenkins_installed

- name: Ensure Jenkins service is running
  win_service:
    name: jenkins
    start_mode: auto
    state: started

# - name: Wait for Jenkins to start
#   win_wait_for:
#     path: http://localhost:{{ jenkins_port }}
#     state: started
#     delay: 30
#   when: not jenkins_installed